"String \097"#Cons(Character(S),Cons(Character(t),Cons(Character(r),Cons(Character(i),Cons(Character(n),Cons(Character(g),Cons(Character( ),Cons(Character(a),Nil))))))))
'\098'#Character(b)
'a'#Character(a)
3 (* blub *) *)#!
3 (* (* blub *)#!
3 (* foo *)#Integer(3)
3 (* foo (* bar *) baz *)#Integer(3)
1-2-(- 3)#BinOp(sub,BinOp(sub,Integer(1),Integer(2)),UnOp(neg,Integer(3)))
a- -b#BinOp(sub,Id(a),UnOp(neg,Id(b)))
a- not b#BinOp(sub,Id(a),UnOp(not,Id(b)))
3*foo+2*(1-4)::4::[]#Cons(BinOp(add,BinOp(mul,Integer(3),Id(foo)),BinOp(mul,Integer(2),BinOp(sub,Integer(1),Integer(4)))),Cons(Integer(4),Nil))
3*foo+2*(1+4)::4::[]#Cons(BinOp(add,BinOp(mul,Integer(3),Id(foo)),BinOp(mul,Integer(2),BinOp(add,Integer(1),Integer(4)))),Cons(Integer(4),Nil))
(2::3)*[]#BinOp(mul,Cons(Integer(2),Integer(3)),Nil)
{bar = 5}.baz#Field(Record(List((Id(bar),Integer(5)))),Id(baz))
{bar = 1; foo = 2}.baz#Field(Record(List((Id(bar),Integer(1)), (Id(foo),Integer(2)))),Id(baz))
(1,2,3)#Tuple(List(Integer(1), Integer(2), Integer(3)))
(1)#Integer(1)
[1,2,3]#!
true#Bool(true)
false#Bool(false)
match 5 with _ -> foo#Match(Integer(5),List((Underscore,Id(foo))))
match 5 with _ -> match 3 with bar -> baz#Match(Integer(5),List((Underscore,Match(Integer(3),List((Id(bar),Id(baz)))))))
match 5 with x -> foo | _ -> match 3 with bar -> baz | x -> y#Match(Integer(5),List((Id(x),Id(foo)), (Underscore,Match(Integer(3),List((Id(bar),Id(baz)), (Id(x),Id(y)))))))
match 5 with x -> foo | _ -> (match 3 with bar -> baz) | x -> y#Match(Integer(5),List((Id(x),Id(foo)), (Underscore,Match(Integer(3),List((Id(bar),Id(baz))))), (Id(x),Id(y))))
match {a = 3;b = 4} with {a = c;b = _} -> 0#Match(Record(List((Id(a),Integer(3)), (Id(b),Integer(4)))),List((Record(List((Id(a),Id(c)), (Id(b),Underscore))),Integer(0))))
match {a = 3;b = 4} with _ -> 0#Match(Record(List((Id(a),Integer(3)), (Id(b),Integer(4)))),List((Underscore,Integer(0))))
match 1::[] with 1::"2"::[] -> 2::x#Match(Cons(Integer(1),Nil),List((Cons(Integer(1),Cons(Cons(Character(2),Nil),Nil)),Cons(Integer(2),Id(x)))))
let a = 3 in b#Let(Id(a),Integer(3),Id(b))
let _ = 3 in b#Let(Underscore,Integer(3),Id(b))
let ((a)) = 3 in b#Let(Id(a),Integer(3),Id(b))
let (a,b,c) = a in d#Let(Tuple(List(Id(a), Id(b), Id(c))),Id(a),Id(d))
let rec (a,b,c) = a in d#!
let rec a = 3 in b#LetRec(Id(b),List((Id(a),Integer(3))))
let rec _ = 3 in b#!
(1 a) 2 (3 4 5)#App(Integer(1),List(Id(a), Integer(2), App(Integer(3),List(Integer(4), Integer(5)))))
f x + y#BinOp(add,App(Id(f),List(Id(x))),Id(y))
#x + f y#TODO BinOp(add,Id(x),App(Id(f),List(Id(y))))
f (x@1) (x@2)#App(Id(f),List(TupleElem(Id(x),1), TupleElem(Id(x),2)))
f (-x)#App(Id(f),List(UnOp(neg,Id(x))))
function _ -> 0 | (x,y) -> a#Lambda(Match(Id(00),List((Underscore,Integer(0)), (Tuple(List(Id(x), Id(y))),Id(a)))),List(Id(00)))
#let rec f = function _ -> 0 in f 6#TODO
